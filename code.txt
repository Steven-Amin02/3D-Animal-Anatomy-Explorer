<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Animal Anatomy Explorer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
            height: 100vh;
            transition: background 0.3s ease;
        }

        body.dark-mode {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .container {
            display: flex;
            height: 100vh;
            position: relative;
        }

        /* Sidebar */
        .sidebar {
            width: 320px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            overflow-y: auto;
            box-shadow: 2px 0 20px rgba(0, 0, 0, 0.1);
            z-index: 10;
            transition: background 0.3s ease, color 0.3s ease;
        }

        .dark-mode .sidebar {
            background: rgba(30, 30, 46, 0.95);
            color: #e0e0e0;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .logo::before {
            content: "🦴";
            font-size: 32px;
        }

        .section {
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 14px;
            font-weight: 600;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 15px;
            transition: color 0.3s ease;
        }

        .dark-mode .section-title {
            color: #a0a0a0;
        }

        /* Theme Toggle */
        .theme-toggle {
            position: absolute;
            top: 30px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            transition: all 0.3s ease;
            z-index: 100;
        }

        .theme-toggle:hover {
            transform: scale(1.1) rotate(15deg);
            background: rgba(255, 255, 255, 0.3);
        }

        .dark-mode .theme-toggle {
            background: rgba(50, 50, 70, 0.5);
            border-color: rgba(255, 255, 255, 0.2);
        }

        /* State Toggle */
        .state-toggle {
            display: flex;
            background: #f0f0f0;
            border-radius: 12px;
            padding: 4px;
            gap: 4px;
            transition: background 0.3s ease;
        }

        .dark-mode .state-toggle {
            background: #2a2a3e;
        }

        .state-btn {
            flex: 1;
            padding: 12px;
            border: none;
            background: transparent;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #666;
        }

        .dark-mode .state-btn {
            color: #a0a0a0;
        }

        .state-btn.active {
            background: white;
            color: #667eea;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .dark-mode .state-btn.active {
            background: #4a4a6a;
            color: #8b9eff;
        }

        .state-btn:hover:not(.active) {
            color: #667eea;
        }

        /* File Upload */
        .upload-area {
            border: 2px dashed #d0d0d0;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }

        .upload-area:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .upload-area.uploaded {
            border-color: #4caf50;
            background: #f1f8f4;
        }

        .upload-icon {
            font-size: 32px;
            margin-bottom: 10px;
        }

        .upload-text {
            font-size: 13px;
            color: #666;
        }

        .upload-text.success {
            color: #4caf50;
            font-weight: 600;
        }

        input[type="file"] {
            display: none;
        }

        /* Info Panel - Enhanced */
        .info-panel {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 16px;
            padding: 0;
            color: white;
            min-height: 250px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .dark-mode .info-panel {
            background: linear-gradient(135deg, #2d3561 0%, #3d2a4a 100%);
        }

        .info-header {
            padding: 25px 25px 20px 25px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .info-title {
            font-size: 22px;
            font-weight: bold;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .info-icon {
            font-size: 28px;
        }

        .info-category {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            opacity: 0.8;
            font-weight: 600;
        }

        .info-body {
            padding: 25px;
        }

        .info-description {
            font-size: 15px;
            line-height: 1.8;
            opacity: 0.95;
            margin-bottom: 20px;
        }

        .info-details {
            display: grid;
            gap: 12px;
        }

        .info-detail-item {
            background: rgba(255, 255, 255, 0.15);
            padding: 12px 15px;
            border-radius: 10px;
            font-size: 13px;
            display: flex;
            align-items: start;
            gap: 10px;
            backdrop-filter: blur(10px);
        }

        .info-detail-item .emoji {
            font-size: 18px;
            flex-shrink: 0;
        }

        .info-detail-item .text {
            flex: 1;
        }

        .info-detail-label {
            font-weight: 600;
            margin-bottom: 3px;
            opacity: 0.9;
        }

        .info-detail-value {
            opacity: 0.85;
            line-height: 1.5;
        }

        .no-selection {
            text-align: center;
            padding: 50px 20px;
            opacity: 0.7;
        }

        .no-selection-icon {
            font-size: 56px;
            margin-bottom: 15px;
            animation: bounce 2s infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .no-selection-text {
            font-size: 14px;
            line-height: 1.6;
        }

        /* Canvas Area */
        .canvas-area {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #canvas3d {
            width: 100%;
            height: 100%;
            cursor: grab;
        }

        #canvas3d:active {
            cursor: grabbing;
        }

        /* Controls Overlay */
        .controls-overlay {
            position: absolute;
            top: 30px;
            right: 90px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease;
        }

        .dark-mode .controls-overlay {
            background: rgba(30, 30, 46, 0.95);
        }

        .control-btn {
            width: 40px;
            height: 40px;
            border: none;
            background: #f0f0f0;
            border-radius: 8px;
            cursor: pointer;
            font-size: 18px;
            margin: 5px;
            transition: all 0.3s ease;
        }

        .dark-mode .control-btn {
            background: #2a2a3e;
            color: #e0e0e0;
        }

        .control-btn:hover {
            background: #667eea;
            color: white;
            transform: scale(1.1);
        }

        .dark-mode .control-btn:hover {
            background: #8b9eff;
        }

        /* Loading */
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: white;
            font-size: 18px;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Instructions */
        .instructions {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 15px 25px;
            border-radius: 30px;
            font-size: 13px;
            color: #666;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .dark-mode .instructions {
            background: rgba(30, 30, 46, 0.95);
            color: #a0a0a0;
        }

        .instructions span {
            margin: 0 15px;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                max-height: 40vh;
            }

            .container {
                flex-direction: column;
            }

            .controls-overlay {
                top: 10px;
                right: 10px;
                padding: 10px;
            }

            .instructions {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">Anatomy Explorer</div>

            <!-- State Toggle -->
            <div class="section">
                <div class="section-title">Visualization Mode</div>
                <div class="state-toggle">
                    <button class="state-btn active" data-state="normal">🐾 Normal</button>
                    <button class="state-btn" data-state="muscle">💪 Muscles</button>
                </div>
            </div>

            <!-- File Upload -->
            <div class="section">
                <div class="section-title">Load 3D Models</div>
                <label for="normalModel" class="upload-area" id="normalUpload">
                    <div class="upload-icon">📦</div>
                    <div class="upload-text">Upload Normal Model (.glb)</div>
                </label>
                <input type="file" id="normalModel" accept=".glb">

                <label for="muscleModel" class="upload-area" id="muscleUpload">
                    <div class="upload-icon">📦</div>
                    <div class="upload-text">Upload Muscle Model (.glb)</div>
                </label>
                <input type="file" id="muscleModel" accept=".glb">
            </div>

            <!-- Info Panel -->
            <div class="section">
                <div class="section-title">Part Information</div>
                <div class="info-panel" id="infoPanel">
                    <div class="no-selection">
                        <div class="no-selection-icon">👆</div>
                        <div>Click on a part of the 3D model to view detailed information</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 3D Canvas Area -->
        <div class="canvas-area">
            <!-- Theme Toggle Button -->
            <button class="theme-toggle" id="themeToggle" title="Toggle Dark Mode">🌙</button>
            
            <canvas id="canvas3d"></canvas>
            <div class="loading" id="loading" style="display: none;">
                <div class="spinner"></div>
                <div>Loading 3D Model...</div>
            </div>
            
            <div class="controls-overlay">
                <button class="control-btn" id="resetView" title="Reset View">🔄</button>
                <button class="control-btn" id="zoomIn" title="Zoom In">➕</button>
                <button class="control-btn" id="zoomOut" title="Zoom Out">➖</button>
            </div>

            <div class="instructions">
                <span>🖱️ Drag to Rotate</span>
                <span>🔍 Scroll to Zoom</span>
                <span>👆 Click to Select</span>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script>
        // Anatomy data (static information for different body parts)
        const anatomyData = {
            normal: {
                head: {
                    title: "Head & Skull",
                    category: "Skeletal Structure",
                    icon: "🦴",
                    description: "The head houses the brain and primary sensory organs. The skull protects the brain and provides structure for the face.",
                    details: [
                        { emoji: "🧠", label: "Function", value: "Protects the brain and sensory organs (eyes, ears, nose)" },
                        { emoji: "🔬", label: "Composition", value: "Consists of cranial bones (cranium) and facial bones" },
                        { emoji: "⚡", label: "Features", value: "Contains eye sockets, nasal cavity, and jaw attachment points" }
                    ]
                },
                torso: {
                    title: "Torso & Ribcage",
                    category: "Core Structure",
                    icon: "🫁",
                    description: "The torso contains vital organs and provides the central framework for the body's structure.",
                    details: [
                        { emoji: "❤️", label: "Protection", value: "Ribcage shields heart, lungs, and major blood vessels" },
                        { emoji: "🫁", label: "Respiration", value: "Enables breathing movements through rib expansion" },
                        { emoji: "🔗", label: "Connection", value: "Links upper and lower body through spine and pelvis" }
                    ]
                },
                legs: {
                    title: "Legs & Limbs",
                    category: "Locomotion System",
                    icon: "🦵",
                    description: "The legs provide mobility, stability, and support the body's weight during movement.",
                    details: [
                        { emoji: "🦴", label: "Bones", value: "Femur (thigh), tibia and fibula (lower leg), foot bones" },
                        { emoji: "🔄", label: "Joints", value: "Hip, knee, and ankle enable complex movement patterns" },
                        { emoji: "⚖️", label: "Function", value: "Support weight, enable running, jumping, and balance" }
                    ]
                },
                tail: {
                    title: "Tail",
                    category: "Balance & Communication",
                    icon: "🐾",
                    description: "The tail serves multiple functions including balance, communication, and temperature regulation.",
                    details: [
                        { emoji: "⚖️", label: "Balance", value: "Acts as counterweight during movement and turns" },
                        { emoji: "💬", label: "Communication", value: "Expresses emotions and intentions through position" },
                        { emoji: "🦴", label: "Structure", value: "Composed of caudal vertebrae with flexible joints" }
                    ]
                },
                spine: {
                    title: "Spine & Vertebrae",
                    category: "Central Support",
                    icon: "🦴",
                    description: "The spine is the body's central support structure, protecting the spinal cord while enabling flexibility.",
                    details: [
                        { emoji: "🛡️", label: "Protection", value: "Shields the spinal cord and nerve roots" },
                        { emoji: "💪", label: "Support", value: "Bears body weight and maintains posture" },
                        { emoji: "🔄", label: "Flexibility", value: "Allows bending, twisting, and complex movements" }
                    ]
                }
            },
            muscle: {
                head: {
                    title: "Facial & Jaw Muscles",
                    category: "Muscular System",
                    icon: "💪",
                    description: "Powerful muscles that control jaw movement, facial expressions, and protect sensory organs.",
                    details: [
                        { emoji: "🍖", label: "Mastication", value: "Masseter and temporalis muscles power jaw closure for eating" },
                        { emoji: "😊", label: "Expression", value: "Facial muscles enable communication through expressions" },
                        { emoji: "⚡", label: "Strength", value: "Some of the strongest muscles relative to size in the body" }
                    ]
                },
                torso: {
                    title: "Core & Respiratory Muscles",
                    category: "Muscular System",
                    icon: "🫁",
                    description: "Essential muscles for breathing, posture, and core stability.",
                    details: [
                        { emoji: "🫁", label: "Breathing", value: "Diaphragm and intercostals control respiratory movements" },
                        { emoji: "💪", label: "Core Stability", value: "Abdominal muscles maintain posture and protect organs" },
                        { emoji: "🔄", label: "Movement", value: "Enable trunk rotation, bending, and stabilization" }
                    ]
                },
                legs: {
                    title: "Leg Musculature",
                    category: "Muscular System",
                    icon: "🦵",
                    description: "Powerful muscles that enable locomotion, jumping, and maintain balance.",
                    details: [
                        { emoji: "⚡", label: "Power", value: "Quadriceps extend knee, hamstrings flex it" },
                        { emoji: "🏃", label: "Movement", value: "Enable running, jumping, climbing, and walking" },
                        { emoji: "💪", label: "Strength", value: "Calf muscles (gastrocnemius, soleus) provide push-off power" }
                    ]
                },
                tail: {
                    title: "Tail Muscles",
                    category: "Muscular System",
                    icon: "🐾",
                    description: "Flexible muscles controlling tail movement for balance and communication.",
                    details: [
                        { emoji: "🔄", label: "Movement", value: "Multiple small muscles allow precise positioning" },
                        { emoji: "💬", label: "Expression", value: "Enable wagging, raising, lowering, and curling" },
                        { emoji: "⚖️", label: "Balance", value: "Adjust tail position dynamically during movement" }
                    ]
                },
                back: {
                    title: "Back Musculature",
                    category: "Muscular System",
                    icon: "💪",
                    description: "Complex layers of muscles supporting posture, movement, and spinal protection.",
                    details: [
                        { emoji: "🦴", label: "Support", value: "Erector spinae muscles maintain upright posture" },
                        { emoji: "💪", label: "Power", value: "Latissimus dorsi enables pulling and shoulder movement" },
                        { emoji: "🛡️", label: "Protection", value: "Multiple layers stabilize and protect the spine" }
                    ]
                }
            }
        };

        // Three.js setup
        let scene, camera, renderer, currentModel, controls;
        let normalModel = null, muscleModel = null;
        let currentState = 'normal';
        let raycaster, mouse;
        let isDragging = false;
        let previousMousePosition = { x: 0, y: 0 };

        function init() {
            const canvas = document.getElementById('canvas3d');
            
            // Scene
            scene = new THREE.Scene();
            scene.background = null;

            // Camera
            camera = new THREE.PerspectiveCamera(50, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
            camera.position.set(0, 1, 3);

            // Renderer
            renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);

            // Lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
            scene.add(ambientLight);

            const directionalLight1 = new THREE.DirectionalLight(0xffffff, 1.0);
            directionalLight1.position.set(5, 5, 5);
            scene.add(directionalLight1);

            const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.6);
            directionalLight2.position.set(-5, 3, -5);
            scene.add(directionalLight2);

            const directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.4);
            directionalLight3.position.set(0, -5, 0);
            scene.add(directionalLight3);

            // Raycaster for clicks
            raycaster = new THREE.Raycaster();
            mouse = new THREE.Vector2();

            // Mouse controls (basic orbit)
            canvas.addEventListener('mousedown', (e) => {
                isDragging = true;
                previousMousePosition = { x: e.clientX, y: e.clientY };
            });

            canvas.addEventListener('mousemove', (e) => {
                if (isDragging && currentModel) {
                    const deltaX = e.clientX - previousMousePosition.x;
                    const deltaY = e.clientY - previousMousePosition.y;
                    
                    currentModel.rotation.y += deltaX * 0.01;
                    currentModel.rotation.x += deltaY * 0.01;
                    
                    previousMousePosition = { x: e.clientX, y: e.clientY };
                }
            });

            canvas.addEventListener('mouseup', () => {
                isDragging = false;
            });

            canvas.addEventListener('mouseleave', () => {
                isDragging = false;
            });

            // Zoom
            canvas.addEventListener('wheel', (e) => {
                e.preventDefault();
                camera.position.z += e.deltaY * 0.005;
                camera.position.z = Math.max(1, Math.min(10, camera.position.z));
            });

            // Click detection
            canvas.addEventListener('click', (e) => {
                if (!currentModel) return;

                const rect = canvas.getBoundingClientRect();
                mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;
                mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;

                raycaster.setFromCamera(mouse, camera);
                const intersects = raycaster.intersectObject(currentModel, true);

                if (intersects.length > 0) {
                    handlePartClick(intersects[0].object);
                }
            });

            animate();
        }

        function handlePartClick(object) {
            // Get part name from object (you would typically tag these in your 3D software)
            const partName = object.name.toLowerCase() || 'unknown';
            
            // Find matching anatomy data
            let infoKey = 'head'; // default
            if (partName.includes('leg') || partName.includes('limb')) infoKey = 'legs';
            else if (partName.includes('torso') || partName.includes('body') || partName.includes('chest')) infoKey = 'torso';
            else if (partName.includes('tail')) infoKey = 'tail';
            else if (partName.includes('spine') || partName.includes('back')) infoKey = currentState === 'muscle' ? 'back' : 'spine';

            const info = anatomyData[currentState][infoKey];
            displayInfo(info);

            // Visual feedback
            object.material = object.material.clone();
            object.material.emissive = new THREE.Color(0x667eea);
            object.material.emissiveIntensity = 0.3;
            
            setTimeout(() => {
                object.material.emissive = new THREE.Color(0x000000);
            }, 500);
        }

        function displayInfo(info) {
            const panel = document.getElementById('infoPanel');
            
            let detailsHTML = '';
            if (info.details && info.details.length > 0) {
                detailsHTML = '<div class="info-details">';
                info.details.forEach(detail => {
                    detailsHTML += `
                        <div class="info-detail-item">
                            <span class="emoji">${detail.emoji}</span>
                            <div class="text">
                                <div class="info-detail-label">${detail.label}</div>
                                <div class="info-detail-value">${detail.value}</div>
                            </div>
                        </div>
                    `;
                });
                detailsHTML += '</div>';
            }
            
            panel.innerHTML = `
                <div class="info-header">
                    <div class="info-category">${info.category || 'Anatomy'}</div>
                    <div class="info-title">
                        <span class="info-icon">${info.icon || '🔍'}</span>
                        <span>${info.title}</span>
                    </div>
                </div>
                <div class="info-body">
                    <div class="info-description">${info.description}</div>
                    ${detailsHTML}
                </div>
            `;
        }

        function animate() {
            requestAnimationFrame(animate);
            
            // Auto-rotate when not dragging
            if (currentModel && !isDragging) {
                currentModel.rotation.y += 0.002;
            }
            
            renderer.render(scene, camera);
        }

        function loadModel(file, type) {
            const loading = document.getElementById('loading');
            loading.style.display = 'block';

            const reader = new FileReader();

            reader.onload = (e) => {
                const arrayBuffer = e.target.result;
                const blob = new Blob([arrayBuffer]);
                const url = URL.createObjectURL(blob);
                
                const loader = new THREE.GLTFLoader();
                loader.load(url, (gltf) => {
                    const model = gltf.scene;
                    
                    URL.revokeObjectURL(url);
                    
                    // Center and scale model
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    const size = box.getSize(new THREE.Vector3());
                    
                    console.log('Model bounding box:', box);
                    console.log('Model size:', size);
                    console.log('Model center:', center);
                    
                    // Center the model
                    model.position.x = -center.x;
                    model.position.y = -center.y;
                    model.position.z = -center.z;
                    
                    // Scale to fit in view (target size of 2 units)
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 2 / maxDim;
                    model.scale.setScalar(scale);
                    
                    console.log('Applied scale:', scale);
                    
                    // Ensure all materials are visible
                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.material.side = THREE.DoubleSide;
                            if (!child.material.color) {
                                child.material.color = new THREE.Color(0xcccccc);
                            }
                        }
                    });

                    if (type === 'normal') {
                        normalModel = model;
                        // If this is the first model or we're in normal state, show it
                        if (currentState === 'normal') {
                            switchModel(model);
                        }
                    } else {
                        muscleModel = model;
                        // If we're in muscle state, show it
                        if (currentState === 'muscle') {
                            switchModel(model);
                        }
                    }
                    
                    console.log('Model loaded successfully:', type, model);

                    loading.style.display = 'none';
                    
                    // Update upload UI
                    const uploadArea = document.getElementById(type + 'Upload');
                    uploadArea.classList.add('uploaded');
                    uploadArea.querySelector('.upload-icon').textContent = '✓';
                    uploadArea.querySelector('.upload-text').textContent = `${type === 'normal' ? 'Normal' : 'Muscle'} Model Loaded`;
                    uploadArea.querySelector('.upload-text').classList.add('success');
                }, (progress) => {
                    console.log('Loading progress:', progress);
                }, (error) => {
                    console.error('Error loading model:', error);
                    loading.style.display = 'none';
                    alert('Error loading 3D model. Please make sure it is a valid .glb file.');
                });
            };

            reader.readAsArrayBuffer(file);
        }

        function switchModel(newModel) {
            if (currentModel) {
                scene.remove(currentModel);
            }
            if (newModel) {
                currentModel = newModel;
                scene.add(newModel);
                console.log('Model added to scene:', newModel);
                console.log('Scene children:', scene.children.length);
                console.log('Model position:', newModel.position);
                console.log('Model scale:', newModel.scale);
                console.log('Model visible:', newModel.visible);
                console.log('Camera position:', camera.position);
            }
        }

        // Event listeners
        document.querySelectorAll('.state-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.state-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                currentState = btn.dataset.state;
                const model = currentState === 'normal' ? normalModel : muscleModel;
                switchModel(model);
                
                // Reset info panel
                document.getElementById('infoPanel').innerHTML = `
                    <div class="no-selection">
                        <div class="no-selection-icon">👆</div>
                        <div>Click on a part of the 3D model to view detailed information</div>
                    </div>
                `;
            });
        });

        document.getElementById('normalModel').addEventListener('change', (e) => {
            if (e.target.files[0]) loadModel(e.target.files[0], 'normal');
        });

        document.getElementById('muscleModel').addEventListener('change', (e) => {
            if (e.target.files[0]) loadModel(e.target.files[0], 'muscle');
        });

        document.getElementById('resetView').addEventListener('click', () => {
            camera.position.set(0, 1, 3);
            if (currentModel) {
                currentModel.rotation.set(0, 0, 0);
            }
        });

        document.getElementById('zoomIn').addEventListener('click', () => {
            camera.position.z = Math.max(1, camera.position.z - 0.5);
        });

        document.getElementById('zoomOut').addEventListener('click', () => {
            camera.position.z = Math.min(10, camera.position.z + 0.5);
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            const canvas = document.getElementById('canvas3d');
            camera.aspect = canvas.clientWidth / canvas.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
        });

        // Initialize
        init();
    </script>
</body>
</html>